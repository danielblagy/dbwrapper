// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	context "context"

	dbwrapper "github.com/danielblagy/dbwrapper"
	mock "github.com/stretchr/testify/mock"
)

// ConnectionPool is an autogenerated mock type for the ConnectionPool type
type ConnectionPool struct {
	mock.Mock
}

// BeginTx provides a mock function with given fields: ctx
func (_m *ConnectionPool) BeginTx(ctx context.Context) (dbwrapper.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 dbwrapper.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (dbwrapper.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) dbwrapper.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(dbwrapper.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *ConnectionPool) Close() {
	_m.Called()
}

// Exec provides a mock function with given fields: ctx, qb
func (_m *ConnectionPool) Exec(ctx context.Context, qb dbwrapper.Sqlizer) error {
	ret := _m.Called(ctx, qb)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbwrapper.Sqlizer) error); ok {
		r0 = rf(ctx, qb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, qb, dest
func (_m *ConnectionPool) Get(ctx context.Context, qb dbwrapper.Sqlizer, dest interface{}) error {
	ret := _m.Called(ctx, qb, dest)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbwrapper.Sqlizer, interface{}) error); ok {
		r0 = rf(ctx, qb, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx, qb, dest
func (_m *ConnectionPool) GetList(ctx context.Context, qb dbwrapper.Sqlizer, dest interface{}) error {
	ret := _m.Called(ctx, qb, dest)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dbwrapper.Sqlizer, interface{}) error); ok {
		r0 = rf(ctx, qb, dest)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewConnectionPool creates a new instance of ConnectionPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnectionPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnectionPool {
	mock := &ConnectionPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
